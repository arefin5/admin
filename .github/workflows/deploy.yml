name: CI/CD for Next.js with Docker

on:
  push:
    branches:
      - main

env:
  ACTIONS_STEP_DEBUG: true
  DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/next_admin:latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21.7.1'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .
          docker push ${{ env.DOCKER_IMAGE }}

  # deploy:
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: Deploy to Server
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ vars.SERVER_IP }}
  #         username: root  # Replace with the appropriate user if not root
  #         password: ${{ secrets.SERVER_PASSWORD }}
  #         port: 22
  #         script: |
  #           echo "Starting deployment on the server..."

  #           # Troubleshooting steps - Restart Docker and ensure iptables is set correctly
  #           sudo systemctl restart docker
  #           echo 'Setting iptables configuration for Docker...'
  #           echo '{"iptables": true}' | sudo tee /etc/docker/daemon.json
  #           sudo systemctl restart docker
  #           # Stop any process using port 3000
  #           echo "Stopping any process using port 3000..."
  #           sudo fuser -k 3000/tcp || true

  #           # Check if port 3000 is free
  #           if sudo lsof -i:3000; then
  #            echo "Warning: Port 3000 is still in use. Exiting..."
  #            exit 1
  #           else
  #            echo "Port 3000 is free."
  #           fi

  #           # Optional firewall configuration if ufw is available
  #           if command -v ufw &>/dev/null; then
  #             echo "Opening port 3000 on the firewall..."
  #             sudo ufw allow 3000/tcp || true
  #           else
  #             echo "ufw not found; skipping firewall configuration for port 3000."
  #           fi
            
  #           # Pull the latest image
  #           IMAGE_TAG="${{ env.DOCKER_IMAGE }}"
           
  #           echo "Pulling Docker image with tag: $IMAGE_TAG"
  #           docker pull $IMAGE_TAG

  #           # Stop and remove any existing container
  #           docker stop nextjs_app || true
  #           docker rm nextjs_app || true

  #           # Run the container with troubleshooting steps
  #           docker run -d --name nextjs_app -p ${{ vars.SERVER_PORT }}:3000 $IMAGE_TAG
    
  deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment: production
      steps:
        - name: Deploy to Server
          uses: appleboy/ssh-action@v0.1.5
          with:
            host: ${{ vars.SERVER_IP }}
            username: root  # Replace with the appropriate user if not root
            password: ${{ secrets.SERVER_PASSWORD }}
            port: 22
            script: |
              echo "Starting deployment on the server..."

              # Restart Docker to ensure a clean state
              sudo systemctl restart docker

              # Check if port 3002 is free
              echo "Checking if port 3002 is free..."
              if sudo lsof -i:3002; then
                echo "Warning: Port 3002 is already in use. Exiting..."
                exit 1
              else
                echo "Port 3002 is free. Proceeding..."
              fi

              # Configure firewall for port 3002 if ufw is available
              if command -v ufw &>/dev/null; then
                echo "Configuring firewall for port 3002..."
                sudo ufw allow 3002/tcp || true
              else
                echo "ufw not found; skipping firewall configuration for port 3002."
              fi

              # Pull the latest Docker image
              IMAGE_TAG="${{ env.DOCKER_IMAGE }}"
              echo "Pulling Docker image: $IMAGE_TAG"
              docker pull $IMAGE_TAG

              # Stop and remove any existing container with the name 'next_admin'
              docker stop next_admin || true
              docker rm next_admin || true

              # Run the new container with the updated name and port
              echo "Starting the container as 'next_admin' on port 3002..."
              docker run -d --name next_admin -p 3002:3000 $IMAGE_TAG